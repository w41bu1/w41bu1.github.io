[{"categories":["Web"],"content":"A powerful and the most popular content management system (CMS).","date":"2025-08-21","objectID":"/posts/2025-08-21-wordpress-local-and-debugging/","tags":["cms","php","wordpress"],"title":"WordPress Local and Debugging","uri":"/posts/2025-08-21-wordpress-local-and-debugging/"},{"categories":["Web"],"content":"WordPress is a powerful and the most popular content management system (CMS) that allows you to easily create, manage, and customize websites and blogs. It is an open-source CMS, built on PHP and using either MySQL or MariaDB. Released in 2003, initially just for blogging, then evolved into a platform for building websites, online stores, forums, landing pages, etc. Today, more than 40% of websites worldwide run on WordPress. There are two versions of WordPress: WordPress.com Hosting service provided by Automattic You just register an account, no installation needed Limited customization; advanced features require payment WordPress.org Open source, you download and install it on your own hosting/server Fully customizable: install plugins, themes, write code, and build any type of website Ecosystem Core: the main CMS Plugins: add-on software that extends WordPress functionality with new features Themes: add-on software that defines the visual appearance and layout of a WordPress site Why WordPress Hacking? State of WordPress Security in 2024 Most Popular Currently, more than 40% of websites worldwide run on WordPress This means hackers only need to find one common vulnerability =\u003e they can exploit millions of sites at once Similar to the saying: “fish where the fish are” Plugins and Themes WordPress Core has been reviewed for a long time by thousands of developers and researchers, making it very difficult for attackers to compromise directly. However, there are tens of thousands of plugins and themes from various sources with inconsistent quality. Many plugins have poor security coding and are outdated. Hackers just need to scan for outdated versions and exploit them. Setup WordPress for Hacking There are many ways to set up WordPress; searching Google will provide plenty of guides. Here I will set it up on an Ubuntu (22.04) virtual machine: Does not affect real machine services WordPress is relatively lightweight and works well on a VM Install and Configure WordPress Install Dependencies Install the full stack required to run WordPress (web server + database + PHP + important extensions): sudo apt install -y apache2 \\ ghostscript \\ libapache2-mod-php \\ mysql-server \\ php \\ php-bcmath \\ php-curl \\ php-imagick \\ php-intl \\ php-json \\ php-mbstring \\ php-mysql \\ php-xml \\ php-zip Install WordPress Download and install WordPress source into the web directory: # Create folder to store site source code sudo mkdir -p /srv/www # Change ownership to www-data (default user for Apache/Nginx) sudo chown www-data: /srv/www # Download the latest WordPress package and extract it into /srv/www curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www Download a specific version: curl https://wordpress.org/wordpress-6.6.2.tar.gz | sudo -u www-data tar zx -C /srv/www Installing from wordpress.org is the most reliable and safest approach: Ubuntu has a wordpress package in its repository, but it is often outdated compared to the official release. The WordPress community only supports installations from the official source. Configure Apache for WordPress Create \u0026 edit /etc/apache2/sites-available/wordpress.conf: sudo nano /etc/apache2/sites-available/wordpress.conf Paste the following content in: \u003cVirtualHost *:80\u003e DocumentRoot /srv/www/wordpress \u003cDirectory /srv/www/wordpress\u003e Options FollowSymLinks AllowOverride Limit Options FileInfo DirectoryIndex index.php Require all granted \u003c/Directory\u003e \u003cDirectory /srv/www/wordpress/wp-content\u003e Options FollowSymLinks Require all granted \u003c/Directory\u003e \u003c/VirtualHost\u003e Enable the site: sudo a2ensite wordpress Enable rewrite module: sudo a2enmod rewrite (Optional) Disable default site: sudo a2dissite 000-default Reload Apache: sudo service apache2 reload Configure Database sudo mysql -u root CREATE DATABASE wordpress; CREATE USER wordpress@localhost IDENTIFIED BY '\u003cyour-password\u003e'; GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER ON wordpress.* TO wordpress@localhost; FLUSH PRIVILEGES; quit ","date":"2025-08-21","objectID":"/posts/2025-08-21-wordpress-local-and-debugging/:0:0","tags":["cms","php","wordpress"],"title":"WordPress Local and Debugging","uri":"/posts/2025-08-21-wordpress-local-and-debugging/"},{"categories":["Web"],"content":"How to create your personal blog using Github Pages with \"comment\" feature","date":"2025-08-19","objectID":"/posts/2025-08-19-github-pages-with-jekyll-themes-and-giscus/","tags":["blog","jekyll","giscus","github"],"title":"Github Pages with Jekyll themes and Giscus","uri":"/posts/2025-08-19-github-pages-with-jekyll-themes-and-giscus/"},{"categories":["Web"],"content":"When starting a personal blog, there are three tools you should know: GitHub Pages, Jekyll, and Giscus. Github Pages: A free service from GitHub that allows you to deploy static websites directly from a repository. Just push your code to GitHub, and your blog will automatically go live on the Internet without needing your own server. Jekyll: A static site generator integrated with GitHub Pages. Jekyll makes it easy to create blogs from Markdown files, organize content using templates, and apply ready-to-use themes. Giscus: A modern comment system based on GitHub Discussions. Instead of using external services like Disqus, you can leverage GitHub to manage comments, keeping it lightweight and developer-friendly. Requirements A Github account Basic knowledge of Markdown Creating a Site Repository Here, I use the Chirpy theme, a popular theme for GitHub Pages optimized for personal or technical blogging. Steps: Log in to Github and go to the starter. Instead of forking, click Use this template and select Create a new repository to automatically create a Site Repository. Name the new repository \u003cusername\u003e.github.io, replacing \u003cusername\u003e with your GitHub username. Setting up the Environment There are two main reasons to set up a local development environment for your blog: After pushing code to the repository, GitHub Actions takes time to run before building and rendering the site on GitHub Pages. By developing directly on your local machine, you can see changes instantly—faster and more convenient. Using Dev Containers (Recommended for Windows) Dev Containers provide an isolated environment via Docker, preventing conflicts with your system and ensuring all dependencies are managed inside the container. Steps: Install Docker: On Windows/macOS: install Docker Desktop. On Linux: install Docker Engine. Install VS Code and the Dev Containers extension. Clone the repository: If using Docker Desktop: open VS Code and clone the repo in a container volume. If using Docker Engine: clone the repo locally, then open it in a container in VS Code. Wait for the Dev Containers setup process to complete. Setting up Natively (Recommended for Unix-like OS) For Unix-like systems (Linux, macOS), you can set up the environment directly (natively) for better performance. Dev Containers are still available as an alternative. Steps: Follow the Jekyll installation guide and ensure Git is installed. Clone the repository locally. If you forked the theme, install Node.js and run bash tools/init.sh in the root folder to initialize the repo. Run the following commands in the root folder to install gems into ./vendor/bundle/ within the project—no need for sudo and no changes to /var/lib/gems.. bundle config set --local path 'vendor/bundle' bundle install Usage Start the Jekyll Server To run the site locally, use: bundle exec jekyll s Configuration Some variables to configure in _config.yml include: lang: set the website language url: your website URL title: main title shown under the avatar tagline: subtitle or site description avatar: supports local and CORS resources, including gif Comment feature via Giscus We’ll use Giscus as the comment system. Other free alternatives include Disqus and Utterances. Steps: Install giscus on GitHub. In your repository Settings, go to General and enable Discussions so giscus can store comments. Enter the repository name \u003cusername\u003e/\u003cusername\u003e.github.io. A green checkmark will appear when requirements are met. Choose the discussion category and topic for your site. Configure giscus in _config.yml: provider: set to giscus giscus: map the variables you set on giscus to the giscus section Customize the Favicon Create a custom favicon for your website instead of using the theme’s default. Steps: Go to Favicon Generator. Click Browse to select your favicon file, then Create Favicon. Click Download the generated favicon to get the files. Extract the downloaded file and delete these two: browserconfig.xml site.webmanifest Copy the rema","date":"2025-08-19","objectID":"/posts/2025-08-19-github-pages-with-jekyll-themes-and-giscus/:0:0","tags":["blog","jekyll","giscus","github"],"title":"Github Pages with Jekyll themes and Giscus","uri":"/posts/2025-08-19-github-pages-with-jekyll-themes-and-giscus/"}]